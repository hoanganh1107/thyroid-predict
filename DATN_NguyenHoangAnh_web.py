import streamlit as st
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import pickle

# Load m√¥ h√¨nh v√† d·ªØ li·ªáu m·∫´u
# T·∫£i m√¥ h√¨nh
with open('RandomForest_Model.pkl', 'rb') as model_file:
    model = pickle.load(model_file)
sample_data = pd.read_csv('Thyroid_Diff.csv')

# C√°c c·ªôt ph√¢n lo·∫°i
categorical_cols = ['Gender', 'Smoking', 'Hx Smoking', 'Hx Radiothreapy',
                    'Thyroid Function', 'Physical Examination', 'Adenopathy', 'Pathology',
                    'Focality', 'Risk', 'T', 'N', 'M', 'Stage', 'Response']

# T·∫°o LabelEncoder cho c√°c c·ªôt ph√¢n lo·∫°i
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    le.fit(sample_data[col].astype(str))
    label_encoders[col] = le

# ===== Mapping ti·∫øng Vi·ªát =====

gender_mapping = {"F": "N·ªØ", "M": "Nam"}
smoking_mapping = {"No": "Kh√¥ng", "Yes": "C√≥"}
hx_smoking_mapping = {"No": "Kh√¥ng", "Yes": "C√≥"}
hx_radiotherapy_mapping = {"No": "Kh√¥ng", "Yes": "C√≥"}

thyroid_function_mapping = {
    "Euthyroid": "B√¨nh gi√°p",
    "Clinical Hyperthyroidism": "B·ªánh c∆∞·ªùng gi√°p l√¢m s√†ng",
    "Clinical Hypothyroidism": "Suy gi√°p l√¢m s√†ng",
    "Subclinical Hyperthyroidism": "C∆∞·ªùng gi√°p d∆∞·ªõi l√¢m s√†ng",
    "Subclinical Hypothyroidism": "Suy gi√°p d∆∞·ªõi l√¢m s√†ng"
}

physical_exam_mapping = {
    "Single nodular goiter-left": "B∆∞·ªõu c·ªï ƒë∆°n nh√¢n b√™n tr√°i",
    "Multinodular goiter": "B∆∞·ªõu c·ªï ƒëa nh√¢n",
    "Single nodular goiter-right": "B∆∞·ªõu c·ªï ƒë∆°n nh√¢n b√™n ph·∫£i",
    "Normal": "B√¨nh th∆∞·ªùng",
    "Diffuse goiter": "B∆∞·ªõu c·ªï lan t·ªèa"
}

adenopathy_mapping = {
    "No": "Kh√¥ng",
    "Right": "Ph·∫£i",
    "Extensive": "Lan r·ªông",
    "Left": "Tr√°i",
    "Bilateral": "Hai b√™n",
    "Posterior": "Sau"
}

pathology_mapping = {
    "Micropapillary": "Vi nh√∫",
    "Papillary": "Nh√∫",
    "Follicular": "Nang tr·ª©ng",
    "Hurthel cell": "T·∫ø b√†o Hurthle"
}

focality_mapping = {
    "Uni-Focal": "1 ƒëi·ªÉm",
    "Multi-Focal": "ƒêa ƒëi·ªÉm"
}

risk_mapping = {
    "Low": "R·ªßi ro th·∫•p",
    "Intermediate": "R·ªßi ro m·ª©c trung",
    "High": "R·ªßi ro cao"
}

N_mapping = {
    "N0": "Kh√¥ng c√≥ h·∫°ch b·∫°ch huy·∫øt khu v·ª±c n√†o b·ªã ·∫£nh h∆∞·ªüng",
    "N1a": "·∫¢nh h∆∞·ªüng t·ªëi thi·ªÉu c·ªßa h·∫°ch b·∫°ch huy·∫øt khu v·ª±c",
    "N1b": "·∫¢nh h∆∞·ªüng r·ªông r√£i c·ªßa h·∫°ch b·∫°ch huy·∫øt khu v·ª±c"
}

M_mapping = {
    "M0": "Kh√¥ng c√≥ di cƒÉn xa",
    "M1": "C√≥ di cƒÉn xa"
}

response_mapping = {
    "Indeterminate": "Kh√¥ng x√°c ƒë·ªãnh",
    "Excellent": "Xu·∫•t s·∫Øc",
    "Structural Incomplete": "C·∫•u tr√∫c ch∆∞a ho√†n thi·ªán",
    "Biochemical Incomplete": "Sinh h√≥a ch∆∞a ho√†n thi·ªán"
}

# H√†m √°nh x·∫° ng∆∞·ª£c (vi·ªát ‚Üí anh)
def reverse_lookup(mapping_dict, selected_value):
    return next(k for k, v in mapping_dict.items() if v == selected_value)

# ================= Giao di·ªán Streamlit =================

st.title("D·ª± ƒëo√°n t√°i ph√°t ung th∆∞ tuy·∫øn gi√°p")
st.markdown("Vui l√≤ng nh·∫≠p th√¥ng tin b·ªánh nh√¢n:")

age = st.number_input("ƒê·ªô tu·ªïi", min_value=15, max_value=82, value=30)

gender_vi = st.selectbox("Gi·ªõi t√≠nh", list(gender_mapping.values()))
gender = reverse_lookup(gender_mapping, gender_vi)

smoking_vi = st.selectbox("H√∫t thu·ªëc", list(smoking_mapping.values()))
smoking = reverse_lookup(smoking_mapping, smoking_vi)

hx_smoking_vi = st.selectbox("Ti·ªÅn s·ª≠ h√∫t thu·ªëc", list(hx_smoking_mapping.values()))
hx_smoking = reverse_lookup(hx_smoking_mapping, hx_smoking_vi)

hx_radiotherapy_vi = st.selectbox("Ti·ªÅn s·ª≠ x·∫° tr·ªã", list(hx_radiotherapy_mapping.values()))
hx_radiotherapy = reverse_lookup(hx_radiotherapy_mapping, hx_radiotherapy_vi)

thyroid_vi = st.selectbox("Ch·ª©c nƒÉng tuy·∫øn gi√°p", list(thyroid_function_mapping.values()))
thyroid_func = reverse_lookup(thyroid_function_mapping, thyroid_vi)

physical_vi = st.selectbox("Kh√°m l√¢m s√†ng", list(physical_exam_mapping.values()))
physical_exam = reverse_lookup(physical_exam_mapping, physical_vi)

adenopathy_vi = st.selectbox("H·∫°ch b·∫°ch huy·∫øt c·ªï", list(adenopathy_mapping.values()))
adenopathy = reverse_lookup(adenopathy_mapping, adenopathy_vi)

pathology_vi = st.selectbox("M√¥ b·ªánh h·ªçc", list(pathology_mapping.values()))
pathology = reverse_lookup(pathology_mapping, pathology_vi)

focality_vi = st.selectbox("ƒêa ·ªï / ƒê∆°n ·ªï", list(focality_mapping.values()))
focality = reverse_lookup(focality_mapping, focality_vi)

risk_vi = st.selectbox("M·ª©c ƒë·ªô nguy c∆°", list(risk_mapping.values()))
risk = reverse_lookup(risk_mapping, risk_vi)

# L·ªçc b·ªè NaN trong T
T_options = sample_data["T"].dropna().unique()
T = st.selectbox("Ph√¢n lo·∫°i kh·ªëi u (T)", T_options)

st.markdown("""
**üìò Gi·∫£i th√≠ch ph√¢n lo·∫°i T:**
- **T1a**: Kh·ªëi u ‚â§ 1 cm, n·∫±m ho√†n to√†n trong tuy·∫øn gi√°p  
- **T1b**: Kh·ªëi u > 1 cm nh∆∞ng ‚â§ 2 cm  
- **T2**: Kh·ªëi u > 2 cm nh∆∞ng ‚â§ 4 cm  
- **T3a**: Kh·ªëi u > 4 cm nh∆∞ng ch∆∞a x√¢m l·∫•n  
- **T3b**: Kh·ªëi u ph√°t tri·ªÉn ra ngo√†i tuy·∫øn gi√°p  
- **T4a**: X√¢m l·∫•n c√°c c·∫•u tr√∫c g·∫ßn nh∆∞ kh√≠ qu·∫£n, th·ª±c qu·∫£n  
- **T4b**: X√¢m l·∫•n s√¢u v√†o c∆° quan quan tr·ªçng, kh√¥ng th·ªÉ ph·∫´u thu·∫≠t  
""")

N_vi = st.selectbox("Ph√¢n lo·∫°i h·∫°ch (N)", list(N_mapping.values()))
N = reverse_lookup(N_mapping, N_vi)

M_vi = st.selectbox("Ph√¢n lo·∫°i di cƒÉn xa (M)", list(M_mapping.values()))
M = reverse_lookup(M_mapping, M_vi)

stage = st.selectbox("Giai ƒëo·∫°n b·ªánh", sample_data["Stage"].dropna().unique())

response_vi = st.selectbox("Ph·∫£n ·ª©ng v·ªõi ƒëi·ªÅu tr·ªã", list(response_mapping.values()))
response = reverse_lookup(response_mapping, response_vi)

# ================== D·ª∞ ƒêO√ÅN ==================

if st.button("üîç D·ª± ƒëo√°n"):
    input_data = pd.DataFrame([{
        'Age': age,
        'Gender': gender,
        'Smoking': smoking,
        'Hx Smoking': hx_smoking,
        'Hx Radiothreapy': hx_radiotherapy,
        'Thyroid Function': thyroid_func,
        'Physical Examination': physical_exam,
        'Adenopathy': adenopathy,
        'Pathology': pathology,
        'Focality': focality,
        'Risk': risk,
        'T': T,
        'N': N,
        'M': M,
        'Stage': stage,
        'Response': response
    }])

    # M√£ h√≥a d·ªØ li·ªáu
    for col in categorical_cols:
        input_data[col] = label_encoders[col].transform(input_data[col].astype(str))

    # D·ª± ƒëo√°n
    prediction = model.predict(input_data)[0]
    prediction_proba = model.predict_proba(input_data)[0]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if prediction == 1:
        st.error("‚ö†Ô∏è K·∫øt qu·∫£: **C√ì T√ÅI PH√ÅT**\n\nNguy c∆° t√°i ph√°t cao, c·∫ßn theo d√µi s√°t.")
    else:
        st.success("‚úÖ K·∫øt qu·∫£: **KH√îNG T√ÅI PH√ÅT**\n\nNguy c∆° t√°i ph√°t th·∫•p, ti·∫øp t·ª•c theo d√µi ƒë·ªãnh k·ª≥.")
